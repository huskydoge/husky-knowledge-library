{
  "vue3": [
    {
      "title": "How to Deploy Your Vite/Vue 3 Application in GitHub Pages 2023",
      "tags": [
        "vue3",
        "github page"
      ],
      "path": "notes/How to Deploy Your Vite:Vue 3 Application in GitHub Pages 2023.md",
      "content": "---\ntitle: \"How to Deploy Your Vite/Vue 3 Application in GitHub Pages 2023\"\ntags: [vue3, github page]\n---\n\n\n\n# Step 1 — Have your repository setup in GitHub\n\nIf you are starting from scratch, start by following the steps in GitHub’s article here:\n\n1. [Create your repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-new-repository)\n2. After you have it set up, grab the remote URL and run the following commands to push up your locally hosted code:\n\n```\ngit remote add origin <REMOTE_URL>\ngit remote -v\ngit push origin main\n```\n\nWhile it is possible to explore this topic in greater depth, it is not our main focus. Let's move on!\n\n# Step 2 — Set up your Vue App for deployment\n\nIf you’re not using a CNAME and hosting your Project Page on GitHub Pages, it’s served out of a “repo-name” subfolder by default like this:\n\n```\nhttps://<USERNAME>.github.io/<REPONAME>\n```\n\nWhat this means for you is that whatever folder you are linking to locally to grab your assets (CSS/Images/JS/etc), such as`/assets/my-folder` , will now be available at a new location in production:\n\n```\n/<REPONAME>/assets/my-folder\n```\n\nThis will most certainly cause references to fail since we currently haven’t accounted for this in our code.\n\nHowever, there is a simple solution to help you utilize this GitHub page URL structure while still maintaining the ability to preview your site locally:\n\n### Step 2(a) — Add Base Public Path\n\nYou have to simply prefix all links in your application with `<REPONAME>` to get it to work in GitHub pages. Luckily, Vite has a build option that will allow you to do just that.\n\nFind your `vite.config.ts` file and add your repo name there like so:\n\n- note that the config file *should* be available in your local if you used Vue’s [quick start](https://vuejs.org/guide/quick-start.html) creation tool (ie. you ran `npm init vue@latest` to create your project)\n\n```\nexport default defineConfig({\n  base: \"/REPONAME/\",\n  plugins: [],\n  resolve: {\n    alias: [\n      \n    ]\n  },\n})\n```\n\nAnd really that’s all it takes to handle that! The rest of your code can be left as-is, and your links will be automatically prefixed with `/REPONAME/` in production.\n\nRefs: https://vitejs.dev/guide/static-deploy.html#github-pages\n\n### Step 2(b) —Create a ‘gh-pages’  branch containing /dist\n\nGitHub pages needs to find your `/dist` folder in order to serve your website.\n\nBy default, the `/dist` folder is part of our `.gitignore` locally, and you won’t ever see it come up in your staged git files, and quite frankly I would love to keep it that way.\n\nInstead, let's create a separate branch to exclusively house our `/dist` folder, and for GitHub pages to refer to.\n\nIn your `package.json` , add the following under the `scripts` param if it's not there already:\n\n```\n\"scripts\": {\n  ...\n  \"build\": \"vite build\",\n  ...\n}\n```\n\nNow, you can run these commands to push up your `/dist` into a new or existing `gh-pages` branch:\n\n```\nnpm run build\ngit subtree push --prefix dist origin gh-pages\n```\n\nYou should see the branch come up in your repository like so:\n\n![img](https://miro.medium.com/v2/resize:fit:594/1*zaPZqmlcR8kxbhMgPR-Xdw.png)\n\nand if you take a look at the branch’s files you will find the contents of `/dist`:\n\n![img](https://miro.medium.com/v2/resize:fit:1400/1*5O26VWbIEoCCy4sO9eZN_g.png)\n\n# Step 3— Update GitHub pages settings\n\nGo to your repository in github.com, and go to:\n\n1. Settings -> Pages\n2. Under Build and Deployment, for source -> pick **Deploy from a branch**\n3. For your branch, pick **gh-pages**\n4. click save\n\n![img](https://miro.medium.com/v2/resize:fit:1400/1*2DXc_lLPNurJk-vDRFkScw.png)\n\nJust like that, now we have GitHub setup to listen in on the `gh-pages` branch to trigger deployments on every commit you push!\n\nAs an example of what it ends up looking like:\n\n![img](https://miro.medium.com/v2/resize:fit:878/1*q-7vLzCQtxtfMEI1ungUEg.png)\n\nChecking my own list of `gh-pages` branch commits, I see checkmarks next to each one that indicates a successful deployment.\n\n# Step 4— Install the gh-pages node module\n\nThere is a tool out there that will make your life way easier for future deployments, and that is [gh-pages](https://www.npmjs.com/package/gh-pages).\n\nRun the following command to install it:\n\n```\nnpm install gh-pages --save-dev\n```\n\nNow in your `package.json` , add the following under the `scripts` param, both are needed!:\n\n```\n\"scripts\": {\n  ...\n  \"predeploy\": \"npm run build\",\n  \"deploy\": \"gh-pages -d dist\",\n  ...\n}\n```\n\nThen all you need to do to deploy your app to GitHub pages is run the command:\n\n```\nnpm run deploy\n```\n\nThis will cause the `predeploy` and `deploy` scripts defined in `package.json` to run. It will take your latest `/dist` folder push it into the `gh-pages` branch!\n\nRefs: https://github.com/tschaub/gh-pages#command-line-utility\n\n# Step 5 — View your site\n\nGoing back to your GitHub Repository Settings -> Pages, you should see a URL at the top by now indicating your website is live at that location.\n\nCONGRATULATIONS !\n\n [**Source**](https://mkay11.medium.com/how-to-deploy-your-vite-vue-3-application-in-github-pages-2023-2b842f50576a)\n"
    }
  ],
  "github page": [
    {
      "title": "How to Deploy Your Vite/Vue 3 Application in GitHub Pages 2023",
      "tags": [
        "vue3",
        "github page"
      ],
      "path": "notes/How to Deploy Your Vite:Vue 3 Application in GitHub Pages 2023.md",
      "content": "---\ntitle: \"How to Deploy Your Vite/Vue 3 Application in GitHub Pages 2023\"\ntags: [vue3, github page]\n---\n\n\n\n# Step 1 — Have your repository setup in GitHub\n\nIf you are starting from scratch, start by following the steps in GitHub’s article here:\n\n1. [Create your repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-new-repository)\n2. After you have it set up, grab the remote URL and run the following commands to push up your locally hosted code:\n\n```\ngit remote add origin <REMOTE_URL>\ngit remote -v\ngit push origin main\n```\n\nWhile it is possible to explore this topic in greater depth, it is not our main focus. Let's move on!\n\n# Step 2 — Set up your Vue App for deployment\n\nIf you’re not using a CNAME and hosting your Project Page on GitHub Pages, it’s served out of a “repo-name” subfolder by default like this:\n\n```\nhttps://<USERNAME>.github.io/<REPONAME>\n```\n\nWhat this means for you is that whatever folder you are linking to locally to grab your assets (CSS/Images/JS/etc), such as`/assets/my-folder` , will now be available at a new location in production:\n\n```\n/<REPONAME>/assets/my-folder\n```\n\nThis will most certainly cause references to fail since we currently haven’t accounted for this in our code.\n\nHowever, there is a simple solution to help you utilize this GitHub page URL structure while still maintaining the ability to preview your site locally:\n\n### Step 2(a) — Add Base Public Path\n\nYou have to simply prefix all links in your application with `<REPONAME>` to get it to work in GitHub pages. Luckily, Vite has a build option that will allow you to do just that.\n\nFind your `vite.config.ts` file and add your repo name there like so:\n\n- note that the config file *should* be available in your local if you used Vue’s [quick start](https://vuejs.org/guide/quick-start.html) creation tool (ie. you ran `npm init vue@latest` to create your project)\n\n```\nexport default defineConfig({\n  base: \"/REPONAME/\",\n  plugins: [],\n  resolve: {\n    alias: [\n      \n    ]\n  },\n})\n```\n\nAnd really that’s all it takes to handle that! The rest of your code can be left as-is, and your links will be automatically prefixed with `/REPONAME/` in production.\n\nRefs: https://vitejs.dev/guide/static-deploy.html#github-pages\n\n### Step 2(b) —Create a ‘gh-pages’  branch containing /dist\n\nGitHub pages needs to find your `/dist` folder in order to serve your website.\n\nBy default, the `/dist` folder is part of our `.gitignore` locally, and you won’t ever see it come up in your staged git files, and quite frankly I would love to keep it that way.\n\nInstead, let's create a separate branch to exclusively house our `/dist` folder, and for GitHub pages to refer to.\n\nIn your `package.json` , add the following under the `scripts` param if it's not there already:\n\n```\n\"scripts\": {\n  ...\n  \"build\": \"vite build\",\n  ...\n}\n```\n\nNow, you can run these commands to push up your `/dist` into a new or existing `gh-pages` branch:\n\n```\nnpm run build\ngit subtree push --prefix dist origin gh-pages\n```\n\nYou should see the branch come up in your repository like so:\n\n![img](https://miro.medium.com/v2/resize:fit:594/1*zaPZqmlcR8kxbhMgPR-Xdw.png)\n\nand if you take a look at the branch’s files you will find the contents of `/dist`:\n\n![img](https://miro.medium.com/v2/resize:fit:1400/1*5O26VWbIEoCCy4sO9eZN_g.png)\n\n# Step 3— Update GitHub pages settings\n\nGo to your repository in github.com, and go to:\n\n1. Settings -> Pages\n2. Under Build and Deployment, for source -> pick **Deploy from a branch**\n3. For your branch, pick **gh-pages**\n4. click save\n\n![img](https://miro.medium.com/v2/resize:fit:1400/1*2DXc_lLPNurJk-vDRFkScw.png)\n\nJust like that, now we have GitHub setup to listen in on the `gh-pages` branch to trigger deployments on every commit you push!\n\nAs an example of what it ends up looking like:\n\n![img](https://miro.medium.com/v2/resize:fit:878/1*q-7vLzCQtxtfMEI1ungUEg.png)\n\nChecking my own list of `gh-pages` branch commits, I see checkmarks next to each one that indicates a successful deployment.\n\n# Step 4— Install the gh-pages node module\n\nThere is a tool out there that will make your life way easier for future deployments, and that is [gh-pages](https://www.npmjs.com/package/gh-pages).\n\nRun the following command to install it:\n\n```\nnpm install gh-pages --save-dev\n```\n\nNow in your `package.json` , add the following under the `scripts` param, both are needed!:\n\n```\n\"scripts\": {\n  ...\n  \"predeploy\": \"npm run build\",\n  \"deploy\": \"gh-pages -d dist\",\n  ...\n}\n```\n\nThen all you need to do to deploy your app to GitHub pages is run the command:\n\n```\nnpm run deploy\n```\n\nThis will cause the `predeploy` and `deploy` scripts defined in `package.json` to run. It will take your latest `/dist` folder push it into the `gh-pages` branch!\n\nRefs: https://github.com/tschaub/gh-pages#command-line-utility\n\n# Step 5 — View your site\n\nGoing back to your GitHub Repository Settings -> Pages, you should see a URL at the top by now indicating your website is live at that location.\n\nCONGRATULATIONS !\n\n [**Source**](https://mkay11.medium.com/how-to-deploy-your-vite-vue-3-application-in-github-pages-2023-2b842f50576a)\n"
    }
  ],
  "latex": [
    {
      "title": "Latex Reference",
      "tags": [
        "latex",
        "writing"
      ],
      "path": "notes/Latex Reference.md",
      "content": "---\ntitle: \"Latex Reference\"\ntags: [latex, writing]\n---\n\n## How to refer url in latex with ref.bib\n\n在导言去加入url包，及\\usepackage{url}\n\n利用misc文献类型来书写网址参考文献，在bib文件中加入\n\n```\n@misc{trial,\nauthor = {husky},\ntitle = {husky Woof},\nhowpublished = {\\url{http://huskydoge.github.io}}\n}\n```\n\n其中author是作者，title是题目，howpublished就是要引用的网址。\n\n"
    }
  ],
  "writing": [
    {
      "title": "Latex Reference",
      "tags": [
        "latex",
        "writing"
      ],
      "path": "notes/Latex Reference.md",
      "content": "---\ntitle: \"Latex Reference\"\ntags: [latex, writing]\n---\n\n## How to refer url in latex with ref.bib\n\n在导言去加入url包，及\\usepackage{url}\n\n利用misc文献类型来书写网址参考文献，在bib文件中加入\n\n```\n@misc{trial,\nauthor = {husky},\ntitle = {husky Woof},\nhowpublished = {\\url{http://huskydoge.github.io}}\n}\n```\n\n其中author是作者，title是题目，howpublished就是要引用的网址。\n\n"
    }
  ],
  "tools": [
    {
      "title": "toolList",
      "tags": [
        "tools"
      ],
      "path": "notes/toolList.md",
      "content": "---\ntitle: \"toolList\"\ntags: [tools]\n---\n\n\n\n* [Vue Tutorial](https://vuejs.org/guide/essentials/list.html)\n\n"
    }
  ]
}